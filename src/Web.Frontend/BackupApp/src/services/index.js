/*
 * Web.Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.39
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from './ApiClient';
import {AccountMode} from './model/AccountMode';
import {AnswerDto} from './model/AnswerDto';
import {AttemptDto} from './model/AttemptDto';
import {CreateTestDto} from './model/CreateTestDto';
import {DetailedTestInfoDto} from './model/DetailedTestInfoDto';
import {DetailedUserInfoDto} from './model/DetailedUserInfoDto';
import {Gender} from './model/Gender';
import {LoginDto} from './model/LoginDto';
import {NewAnswerDto} from './model/NewAnswerDto';
import {NewAttemptDto} from './model/NewAttemptDto';
import {Question} from './model/Question';
import {QuestionType} from './model/QuestionType';
import {RegisterUserDto} from './model/RegisterUserDto';
import {SetTagsDto} from './model/SetTagsDto';
import {TestDto} from './model/TestDto';
import {TestFullInfoDto} from './model/TestFullInfoDto';
import {UpdateUserDetailedInfoDto} from './model/UpdateUserDetailedInfoDto';
import {UserDto} from './model/UserDto';
import {UserFullInfoDto} from './model/UserFullInfoDto';
import {AttemptApi} from './api/AttemptApi';
import {LoginApi} from './api/LoginApi';
import {TestApi} from './api/TestApi';
import {UserApi} from './api/UserApi';

/**
* Object.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var Webapi = require('index'); // See note below*.
* var xxxSvc = new Webapi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new Webapi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new Webapi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new Webapi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AccountMode model constructor.
     * @property {module:model/AccountMode}
     */
    AccountMode,

    /**
     * The AnswerDto model constructor.
     * @property {module:model/AnswerDto}
     */
    AnswerDto,

    /**
     * The AttemptDto model constructor.
     * @property {module:model/AttemptDto}
     */
    AttemptDto,

    /**
     * The CreateTestDto model constructor.
     * @property {module:model/CreateTestDto}
     */
    CreateTestDto,

    /**
     * The DetailedTestInfoDto model constructor.
     * @property {module:model/DetailedTestInfoDto}
     */
    DetailedTestInfoDto,

    /**
     * The DetailedUserInfoDto model constructor.
     * @property {module:model/DetailedUserInfoDto}
     */
    DetailedUserInfoDto,

    /**
     * The Gender model constructor.
     * @property {module:model/Gender}
     */
    Gender,

    /**
     * The LoginDto model constructor.
     * @property {module:model/LoginDto}
     */
    LoginDto,

    /**
     * The NewAnswerDto model constructor.
     * @property {module:model/NewAnswerDto}
     */
    NewAnswerDto,

    /**
     * The NewAttemptDto model constructor.
     * @property {module:model/NewAttemptDto}
     */
    NewAttemptDto,

    /**
     * The Question model constructor.
     * @property {module:model/Question}
     */
    Question,

    /**
     * The QuestionType model constructor.
     * @property {module:model/QuestionType}
     */
    QuestionType,

    /**
     * The RegisterUserDto model constructor.
     * @property {module:model/RegisterUserDto}
     */
    RegisterUserDto,

    /**
     * The SetTagsDto model constructor.
     * @property {module:model/SetTagsDto}
     */
    SetTagsDto,

    /**
     * The TestDto model constructor.
     * @property {module:model/TestDto}
     */
    TestDto,

    /**
     * The TestFullInfoDto model constructor.
     * @property {module:model/TestFullInfoDto}
     */
    TestFullInfoDto,

    /**
     * The UpdateUserDetailedInfoDto model constructor.
     * @property {module:model/UpdateUserDetailedInfoDto}
     */
    UpdateUserDetailedInfoDto,

    /**
     * The UserDto model constructor.
     * @property {module:model/UserDto}
     */
    UserDto,

    /**
     * The UserFullInfoDto model constructor.
     * @property {module:model/UserFullInfoDto}
     */
    UserFullInfoDto,

    /**
    * The AttemptApi service constructor.
    * @property {module:api/AttemptApi}
    */
    AttemptApi,

    /**
    * The LoginApi service constructor.
    * @property {module:api/LoginApi}
    */
    LoginApi,

    /**
    * The TestApi service constructor.
    * @property {module:api/TestApi}
    */
    TestApi,

    /**
    * The UserApi service constructor.
    * @property {module:api/UserApi}
    */
    UserApi
};
